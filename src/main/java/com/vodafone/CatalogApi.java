/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.vodafone;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.openapitools.model.Catalog;
import org.openapitools.model.CatalogCreate;
import org.openapitools.model.CatalogUpdate;
import org.openapitools.model.Error;
import org.springframework.data.repository.CrudRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.annotation.Generated;
import javax.validation.Valid;
import java.net.URI;
import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-04-11T11:10:26.067+02:00[Europe/Berlin]")
@Validated
@Tag(name = "catalog", description = "the catalog API")
public interface CatalogApi {

    static final String BASE_URI = "/catalog";


    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }
    default Optional<CrudRepository<Catalog, String >> getRepository() {
        return Optional.empty();
    }

    /**
     * POST /catalog : Creates a Catalog
     * This operation creates a Catalog entity.
     *
     * @param catalog The Catalog to be created (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createCatalog",
        summary = "Creates a Catalog",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Catalog.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = BASE_URI,
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<Catalog> createCatalog(
        @Parameter(name = "catalog", description = "The Catalog to be created", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogCreate catalog
    ) {
        if (getRepository().isPresent()) {
            Catalog savedCatalog = getRepository().get().save(catalog.toCatalog(BASE_URI));
            final URI sensorUri = URI.create(savedCatalog.getHref());
            return ResponseEntity.created(sensorUri).body(savedCatalog);
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * DELETE /catalog/{id} : Deletes a Catalog
     * This operation deletes a Catalog entity.
     *
     * @param id Identifier of the Catalog (required)
     * @return Deleted (status code 204)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteCatalog",
        summary = "Deletes a Catalog",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/catalog/{id}",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<Void> deleteCatalog(
        @Parameter(name = "id", description = "Identifier of the Catalog", required = true, schema = @Schema(description = "")) @PathVariable("id") String id
    ) {
        if (getRepository().isPresent()) {
            getRepository().get().deleteById(id);
            return ResponseEntity.noContent().build();
        }
        return new ResponseEntity<Void>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET /catalog : List or find Catalog objects
     * This operation list or find Catalog entities
     *
     * @param fields Comma-separated properties to be provided in response (optional)
     * @param offset Requested index for start of resources to be provided in response (optional)
     * @param limit Requested number of resources to be provided in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listCatalog",
        summary = "List or find Catalog objects",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Catalog.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalog",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<List<Catalog>> listCatalog(
        @Parameter(name = "fields", description = "Comma-separated properties to be provided in response", schema = @Schema(description = "")) @Valid @RequestParam(value = "fields", required = false) String fields,
        @Parameter(name = "offset", description = "Requested index for start of resources to be provided in response", schema = @Schema(description = "")) @Valid @RequestParam(value = "offset", required = false) Integer offset,
        @Parameter(name = "limit", description = "Requested number of resources to be provided in response", schema = @Schema(description = "")) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        if (getRepository().isPresent()) {
            Iterable<Catalog> catalogs = getRepository().get().findAll();
            return ResponseEntity.ok(ApiUtil.toList(catalogs));
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * PATCH /catalog/{id} : Updates partially a Catalog
     * This operation updates partially a Catalog entity.
     *
     * @param id Identifier of the Catalog (required)
     * @param catalog The Catalog to be updated (required)
     * @return Updated (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "patchCatalog",
        summary = "Updates partially a Catalog",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Catalog.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/catalog/{id}",
        produces = { "application/json;charset=utf-8" },
        consumes = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<Catalog> patchCatalog(
        @Parameter(name = "id", description = "Identifier of the Catalog", required = true, schema = @Schema(description = "")) @PathVariable("id") String id,
        @Parameter(name = "catalog", description = "The Catalog to be updated", required = true, schema = @Schema(description = "")) @Valid @RequestBody CatalogUpdate catalogUdate
    ) {
        if (getRepository().isPresent()) {
            Optional<Catalog> possibleCatalog = getRepository().get().findById(id);
            if (possibleCatalog.isPresent()) {
                Catalog catalog = possibleCatalog.get();
                catalog.update(catalogUdate);
                getRepository().get().save(catalog);
                return ResponseEntity.ok(catalog);
            }
            return ResponseEntity.notFound().build();
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /catalog/{id} : Retrieves a Catalog by ID
     * This operation retrieves a Catalog entity. Attribute selection is enabled for all first level attributes.
     *
     * @param id Identifier of the Catalog (required)
     * @param fields Comma-separated properties to provide in response (optional)
     * @return Success (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     *         or Method Not allowed (status code 405)
     *         or Conflict (status code 409)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "retrieveCatalog",
        summary = "Retrieves a Catalog by ID",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Catalog.class))),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "405", description = "Method Not allowed", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "409", description = "Conflict", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class))),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Error.class)))
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalog/{id}",
        produces = { "application/json;charset=utf-8" }
    )
    default ResponseEntity<Catalog> retrieveCatalog(
        @Parameter(name = "id", description = "Identifier of the Catalog", required = true, schema = @Schema(description = "")) @PathVariable("id") String id,
        @Parameter(name = "fields", description = "Comma-separated properties to provide in response", schema = @Schema(description = "")) @Valid @RequestParam(value = "fields", required = false) String fields
    ) {
        if (getRepository().isPresent()) {
            Optional<Catalog> possibleCatalog = getRepository().get().findById(id);
            if (possibleCatalog.isPresent()) {
                return ResponseEntity.ok(possibleCatalog.get());
            }
            return ResponseEntity.notFound().build();
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
